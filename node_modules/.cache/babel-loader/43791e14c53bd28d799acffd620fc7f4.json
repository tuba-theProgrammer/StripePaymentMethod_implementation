{"ast":null,"code":"var _jsxFileName = \"/home/tuba/Work-Folder/MTechub-Assigned Task/StripePaymentMethod_implementation/src/Components/PaymentForm.js\",\n    _s = $RefreshSig$();\n\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport '../App.css';\nimport { TextField } from \"@mui/material\";\nimport { Card } from \"@mui/material\";\nimport { CardContent } from \"@mui/material\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CARD_ELEMENT_OPTIONS = {\n  style: {\n    base: {\n      'color': '#32325d',\n      'fontFamily': '\"Helvetica Neue\", Helvetica, sans-serif',\n      'fontSmoothing': 'antialiased',\n      'fontSize': '16px',\n      '::placeholder': {\n        color: '#aab7c4'\n      }\n    },\n    invalid: {\n      color: '#fa755a',\n      iconColor: '#fa755a'\n    }\n  }\n};\n\nfunction CardInput() {\n  return /*#__PURE__*/_jsxDEV(CardElement, {\n    options: CARD_ELEMENT_OPTIONS\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 6\n  }, this);\n}\n\n_c = CardInput;\nexport default function PaymentForm() {\n  _s();\n\n  const [success, setSuccess] = React.useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  const [email, setEmail] = React.useState('');\n\n  const handleSubmitPay = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const res = await axios.post('http://localhost:3001/pay', {\n      email: email\n    });\n    const clientSecret = res.data['client_secret'];\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: email\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log('Money is in the bank!'); // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  const handleSubmitSub = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n      billing_details: {\n        email: email\n      }\n    });\n\n    if (result.error) {\n      console.log(result.error.message);\n    } else {\n      const res = await axios.post('http://localhost:3001/sub', {\n        'payment_method': result.paymentMethod.id,\n        'email': email\n      }); // eslint-disable-next-line camelcase\n\n      const {\n        client_secret,\n        status\n      } = res.data;\n\n      if (status === 'requires_action') {\n        stripe.confirmCardPayment(client_secret).then(function (result) {\n          if (result.error) {\n            console.log('There was an issue!');\n            console.log(result.error); // Display error message in your UI.\n            // The card was declined (i.e. insufficient funds, card has expired, etc)\n          } else {\n            console.log('You got the money!');\n            setSuccess(true); // Show a success message to your customer\n          }\n        });\n      } else {\n        console.log('You got the money!');\n        setSuccess(true); // No additional information was needed\n        // Show a success message to your customer\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !success ? /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Email\",\n          id: \"outlined-email-input\",\n          helperText: `Email you'll recive updates and receipts on`,\n          margin: \"normal\",\n          variant: \"outlined\",\n          type: \"email\",\n          required: true,\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CardInput, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleSubmitPay,\n            children: \"Pay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleSubmitSub,\n            children: \"Subscription\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You just bought a book \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n}\n\n_s(PaymentForm, \"j/7/dZJS4FXfBY6N7MpFev21q6c=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c2 = PaymentForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CardInput\");\n$RefreshReg$(_c2, \"PaymentForm\");","map":{"version":3,"names":["CardElement","useElements","useStripe","axios","React","TextField","Card","CardContent","Button","CARD_ELEMENT_OPTIONS","style","base","color","invalid","iconColor","CardInput","PaymentForm","success","setSuccess","useState","stripe","elements","email","setEmail","handleSubmitPay","event","res","post","clientSecret","data","result","confirmCardPayment","payment_method","card","getElement","billing_details","error","console","log","message","paymentIntent","status","handleSubmitSub","createPaymentMethod","type","paymentMethod","id","client_secret","then","e","target","value"],"sources":["/home/tuba/Work-Folder/MTechub-Assigned Task/StripePaymentMethod_implementation/src/Components/PaymentForm.js"],"sourcesContent":["\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport '../App.css'\nimport { TextField } from \"@mui/material\";\nimport {Card} from \"@mui/material\";\nimport {CardContent} from \"@mui/material\";\nimport {Button} from \"@mui/material\";\n\n\nconst CARD_ELEMENT_OPTIONS = {\n   style: {\n     base: {\n       'color': '#32325d',\n       'fontFamily': '\"Helvetica Neue\", Helvetica, sans-serif',\n       'fontSmoothing': 'antialiased',\n       'fontSize': '16px',\n       '::placeholder': {\n         color: '#aab7c4',\n       },\n     },\n     invalid: {\n       color: '#fa755a',\n       iconColor: '#fa755a',\n     },\n   },\n };\n function CardInput() {\n   return (\n     <CardElement options={CARD_ELEMENT_OPTIONS} />\n   );\n }\n\n\nexport default function PaymentForm(){\n\n   const [success,setSuccess] = React.useState(false)\n   const stripe = useStripe()\n   const elements = useElements()\n   const [email, setEmail] = React.useState('');\n\n   const handleSubmitPay = async (event) => {\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n  \n      const res = await axios.post('http://localhost:3001/pay', {email: email});\n  \n      const clientSecret = res.data['client_secret'];\n  \n      const result = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            email: email,\n          },\n        },\n      });\n  \n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {\n          console.log('Money is in the bank!');\n          // Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n        }\n      }\n    };\n\n\n\n    const handleSubmitSub = async (event) => {\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n  \n      const result = await stripe.createPaymentMethod({\n        type: 'card',\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: email,\n        },\n      });\n  \n      if (result.error) {\n        console.log(result.error.message);\n      } else {\n        const res = await axios.post('http://localhost:3001/sub', {'payment_method': result.paymentMethod.id, 'email': email});\n        // eslint-disable-next-line camelcase\n        const {client_secret, status} = res.data;\n  \n        if (status === 'requires_action') {\n          stripe.confirmCardPayment(client_secret).then(function(result) {\n            if (result.error) {\n              console.log('There was an issue!');\n              console.log(result.error);\n              // Display error message in your UI.\n              // The card was declined (i.e. insufficient funds, card has expired, etc)\n            } else {\n              console.log('You got the money!');\n              setSuccess(true)\n              // Show a success message to your customer\n            }\n          });\n        } else {\n          console.log('You got the money!');\n          setSuccess(true)\n          // No additional information was needed\n          // Show a success message to your customer\n        }\n      }\n    };\n     \n   return(<>\n     {!success?\n      <Card >\n      <CardContent >\n        <TextField\n          label='Email'\n          id='outlined-email-input'\n          helperText={`Email you'll recive updates and receipts on`}\n          margin='normal'\n          variant='outlined'\n          type='email'\n          required\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          fullWidth\n        />\n   <CardInput/>\n        <div>\n          <Button variant=\"contained\" color=\"primary\"  onClick={handleSubmitPay}>\n            Pay\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitSub}>\n            Subscription\n          </Button>\n        </div>\n      </CardContent>\n      </Card> :\n   <div>\n      <h2>You just bought a book </h2>\n    \n   </div>\n     }\n     \n   </>)\n}"],"mappings":";;;AACA,SAASA,WAAT,EAAsBC,WAAtB,EAAmCC,SAAnC,QAAoD,yBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAAQC,IAAR,QAAmB,eAAnB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAAQC,MAAR,QAAqB,eAArB;;;AAGA,MAAMC,oBAAoB,GAAG;EAC1BC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJ,SAAS,SADL;MAEJ,cAAc,yCAFV;MAGJ,iBAAiB,aAHb;MAIJ,YAAY,MAJR;MAKJ,iBAAiB;QACfC,KAAK,EAAE;MADQ;IALb,CADD;IAULC,OAAO,EAAE;MACPD,KAAK,EAAE,SADA;MAEPE,SAAS,EAAE;IAFJ;EAVJ;AADmB,CAA7B;;AAiBC,SAASC,SAAT,GAAqB;EACnB,oBACE,QAAC,WAAD;IAAa,OAAO,EAAEN;EAAtB;IAAA;IAAA;IAAA;EAAA,QADF;AAGD;;KAJQM,S;AAOV,eAAe,SAASC,WAAT,GAAsB;EAAA;;EAElC,MAAM,CAACC,OAAD,EAASC,UAAT,IAAuBd,KAAK,CAACe,QAAN,CAAe,KAAf,CAA7B;EACA,MAAMC,MAAM,GAAGlB,SAAS,EAAxB;EACA,MAAMmB,QAAQ,GAAGpB,WAAW,EAA5B;EACA,MAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBnB,KAAK,CAACe,QAAN,CAAe,EAAf,CAA1B;;EAEA,MAAMK,eAAe,GAAG,MAAOC,KAAP,IAAiB;IACtC,IAAI,CAACL,MAAD,IAAW,CAACC,QAAhB,EAA0B;MACxB;MACA;MACA;IACD;;IAED,MAAMK,GAAG,GAAG,MAAMvB,KAAK,CAACwB,IAAN,CAAW,2BAAX,EAAwC;MAACL,KAAK,EAAEA;IAAR,CAAxC,CAAlB;IAEA,MAAMM,YAAY,GAAGF,GAAG,CAACG,IAAJ,CAAS,eAAT,CAArB;IAEA,MAAMC,MAAM,GAAG,MAAMV,MAAM,CAACW,kBAAP,CAA0BH,YAA1B,EAAwC;MAC3DI,cAAc,EAAE;QACdC,IAAI,EAAEZ,QAAQ,CAACa,UAAT,CAAoBlC,WAApB,CADQ;QAEdmC,eAAe,EAAE;UACfb,KAAK,EAAEA;QADQ;MAFH;IAD2C,CAAxC,CAArB;;IASA,IAAIQ,MAAM,CAACM,KAAX,EAAkB;MAChB;MACAC,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACM,KAAP,CAAaG,OAAzB;IACD,CAHD,MAGO;MACL;MACA,IAAIT,MAAM,CAACU,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD;QAC/CJ,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAD+C,CAE/C;QACA;QACA;QACA;QACA;MACD;IACF;EACF,CAlCF;;EAsCC,MAAMI,eAAe,GAAG,MAAOjB,KAAP,IAAiB;IACvC,IAAI,CAACL,MAAD,IAAW,CAACC,QAAhB,EAA0B;MACxB;MACA;MACA;IACD;;IAED,MAAMS,MAAM,GAAG,MAAMV,MAAM,CAACuB,mBAAP,CAA2B;MAC9CC,IAAI,EAAE,MADwC;MAE9CX,IAAI,EAAEZ,QAAQ,CAACa,UAAT,CAAoBlC,WAApB,CAFwC;MAG9CmC,eAAe,EAAE;QACfb,KAAK,EAAEA;MADQ;IAH6B,CAA3B,CAArB;;IAQA,IAAIQ,MAAM,CAACM,KAAX,EAAkB;MAChBC,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACM,KAAP,CAAaG,OAAzB;IACD,CAFD,MAEO;MACL,MAAMb,GAAG,GAAG,MAAMvB,KAAK,CAACwB,IAAN,CAAW,2BAAX,EAAwC;QAAC,kBAAkBG,MAAM,CAACe,aAAP,CAAqBC,EAAxC;QAA4C,SAASxB;MAArD,CAAxC,CAAlB,CADK,CAEL;;MACA,MAAM;QAACyB,aAAD;QAAgBN;MAAhB,IAA0Bf,GAAG,CAACG,IAApC;;MAEA,IAAIY,MAAM,KAAK,iBAAf,EAAkC;QAChCrB,MAAM,CAACW,kBAAP,CAA0BgB,aAA1B,EAAyCC,IAAzC,CAA8C,UAASlB,MAAT,EAAiB;UAC7D,IAAIA,MAAM,CAACM,KAAX,EAAkB;YAChBC,OAAO,CAACC,GAAR,CAAY,qBAAZ;YACAD,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACM,KAAnB,EAFgB,CAGhB;YACA;UACD,CALD,MAKO;YACLC,OAAO,CAACC,GAAR,CAAY,oBAAZ;YACApB,UAAU,CAAC,IAAD,CAAV,CAFK,CAGL;UACD;QACF,CAXD;MAYD,CAbD,MAaO;QACLmB,OAAO,CAACC,GAAR,CAAY,oBAAZ;QACApB,UAAU,CAAC,IAAD,CAAV,CAFK,CAGL;QACA;MACD;IACF;EACF,CA1CD;;EA4CD,oBAAO;IAAA,UACJ,CAACD,OAAD,gBACA,QAAC,IAAD;MAAA,uBACA,QAAC,WAAD;QAAA,wBACE,QAAC,SAAD;UACE,KAAK,EAAC,OADR;UAEE,EAAE,EAAC,sBAFL;UAGE,UAAU,EAAG,6CAHf;UAIE,MAAM,EAAC,QAJT;UAKE,OAAO,EAAC,UALV;UAME,IAAI,EAAC,OANP;UAOE,QAAQ,MAPV;UAQE,KAAK,EAAEK,KART;UASE,QAAQ,EAAG2B,CAAD,IAAO1B,QAAQ,CAAC0B,CAAC,CAACC,MAAF,CAASC,KAAV,CAT3B;UAUE,SAAS;QAVX;UAAA;UAAA;UAAA;QAAA,QADF,eAaH,QAAC,SAAD;UAAA;UAAA;UAAA;QAAA,QAbG,eAcE;UAAA,wBACE,QAAC,MAAD;YAAQ,OAAO,EAAC,WAAhB;YAA4B,KAAK,EAAC,SAAlC;YAA6C,OAAO,EAAE3B,eAAtD;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,eAIE,QAAC,MAAD;YAAQ,OAAO,EAAC,WAAhB;YAA4B,KAAK,EAAC,SAAlC;YAA4C,OAAO,EAAEkB,eAArD;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAJF;QAAA;UAAA;UAAA;UAAA;QAAA,QAdF;MAAA;QAAA;QAAA;QAAA;MAAA;IADA;MAAA;MAAA;MAAA;IAAA,QADA,gBA0BH;MAAA,uBACG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADH;MAAA;MAAA;MAAA;IAAA;EA3BO,iBAAP;AAkCF;;GA3HuB1B,W;UAGNd,S,EACED,W;;;MAJIe,W"},"metadata":{},"sourceType":"module"}
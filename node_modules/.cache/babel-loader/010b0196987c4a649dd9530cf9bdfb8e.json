{"ast":null,"code":"var _jsxFileName = \"/home/tuba/Work-Folder/MTechub-Assigned Task/StripePaymentMethod_implementation/src/Components/PaymentForm.js\",\n    _s = $RefreshSig$();\n\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CARD_OPTIONS = {\n  iconStyle: \"solid\",\n  style: {\n    base: {\n      iconColor: \"#c4f0ff\",\n      color: \"#fff\",\n      fontWeight: 500,\n      fontFamily: \"Roboto, Open Sans, Segoe UI, sans-serif\",\n      fontSize: \"16px\",\n      fontSmoothing: \"antialiased\",\n      \":-webkit-autofill\": {\n        color: \"#fce883\"\n      },\n      \"::placeholder\": {\n        color: \"#87bbfd\"\n      }\n    },\n    invalid: {\n      iconColor: \"#ffc7ee\",\n      color: \"#ffc7ee\"\n    }\n  }\n};\nexport default function PaymentForm() {\n  _s();\n\n  const [success, setSuccess] = React.useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  const [email, setEmail] = React.useState('');\n\n  const handleSubmitPay = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const res = await axios.post('http://localhost:3001/pay', {\n      email: email\n    });\n    const clientSecret = res.data['client_secret'];\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: email\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log('Money is in the bank!'); // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  const handleSubmitSub = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n      billing_details: {\n        email: email\n      }\n    });\n\n    if (result.error) {\n      console.log(result.error.message);\n    } else {\n      const res = await axios.post('http://localhost:3001/sub', {\n        'payment_method': result.paymentMethod.id,\n        'email': email\n      }); // eslint-disable-next-line camelcase\n\n      const {\n        client_secret,\n        status\n      } = res.data;\n\n      if (status === 'requires_action') {\n        stripe.confirmCardPayment(client_secret).then(function (result) {\n          if (result.error) {\n            console.log('There was an issue!');\n            console.log(result.error); // Display error message in your UI.\n            // The card was declined (i.e. insufficient funds, card has expired, etc)\n          } else {\n            console.log('You got the money!'); // Show a success message to your customer\n          }\n        });\n      } else {\n        console.log('You got the money!'); // No additional information was needed\n        // Show a success message to your customer\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !success ? /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"FormGroup\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"FormRow\",\n          children: /*#__PURE__*/_jsxDEV(CardElement, {\n            options: CARD_OPTIONS\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitPay,\n        children: \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitSub,\n        children: \"Subcribe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 6\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You just bought a book \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n}\n\n_s(PaymentForm, \"j/7/dZJS4FXfBY6N7MpFev21q6c=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"names":["CardElement","useElements","useStripe","axios","React","CARD_OPTIONS","iconStyle","style","base","iconColor","color","fontWeight","fontFamily","fontSize","fontSmoothing","invalid","PaymentForm","success","setSuccess","useState","stripe","elements","email","setEmail","handleSubmitPay","event","res","post","clientSecret","data","result","confirmCardPayment","payment_method","card","getElement","billing_details","error","console","log","message","paymentIntent","status","handleSubmitSub","createPaymentMethod","type","paymentMethod","id","client_secret","then"],"sources":["/home/tuba/Work-Folder/MTechub-Assigned Task/StripePaymentMethod_implementation/src/Components/PaymentForm.js"],"sourcesContent":["\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport '../App.css'\n\nconst CARD_OPTIONS = {\n\ticonStyle: \"solid\",\n\tstyle: {\n\t\tbase: {\n\t\t\ticonColor: \"#c4f0ff\",\n\t\t\tcolor: \"#fff\",\n\t\t\tfontWeight: 500,\n\t\t\tfontFamily: \"Roboto, Open Sans, Segoe UI, sans-serif\",\n\t\t\tfontSize: \"16px\",\n\t\t\tfontSmoothing: \"antialiased\",\n\t\t\t\":-webkit-autofill\": { color: \"#fce883\" },\n\t\t\t\"::placeholder\": { color: \"#87bbfd\" }\n\t\t},\n\t\tinvalid: {\n\t\t\ticonColor: \"#ffc7ee\",\n\t\t\tcolor: \"#ffc7ee\"\n\t\t}\n\t}\n}\n\n\nexport default function PaymentForm(){\n\n   const [success,setSuccess] = React.useState(false)\n   const stripe = useStripe()\n   const elements = useElements()\n   const [email, setEmail] = React.useState('');\n\n   const handleSubmitPay = async (event) => {\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n  \n      const res = await axios.post('http://localhost:3001/pay', {email: email});\n  \n      const clientSecret = res.data['client_secret'];\n  \n      const result = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            email: email,\n          },\n        },\n      });\n  \n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {\n          console.log('Money is in the bank!');\n          // Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n        }\n      }\n    };\n\n\n\n    const handleSubmitSub = async (event) => {\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n  \n      const result = await stripe.createPaymentMethod({\n        type: 'card',\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: email,\n        },\n      });\n  \n      if (result.error) {\n        console.log(result.error.message);\n      } else {\n        const res = await axios.post('http://localhost:3001/sub', {'payment_method': result.paymentMethod.id, 'email': email});\n        // eslint-disable-next-line camelcase\n        const {client_secret, status} = res.data;\n  \n        if (status === 'requires_action') {\n          stripe.confirmCardPayment(client_secret).then(function(result) {\n            if (result.error) {\n              console.log('There was an issue!');\n              console.log(result.error);\n              // Display error message in your UI.\n              // The card was declined (i.e. insufficient funds, card has expired, etc)\n            } else {\n              console.log('You got the money!');\n              // Show a success message to your customer\n            }\n          });\n        } else {\n          console.log('You got the money!');\n          // No additional information was needed\n          // Show a success message to your customer\n        }\n      }\n    };\n     \n   return(<>\n     {!success?\n     <form>\n      <label>\n    Email:\n    <input type=\"text\" name=\"email\" />\n     </label>\n       <fieldset className=\"FormGroup\">\n          <div className=\"FormRow\"> \n          <CardElement options={CARD_OPTIONS}/>\n          </div>\n       </fieldset>\n        <button onClick={handleSubmitPay}>\n         Pay\n        </button>\n\n        <button onClick={handleSubmitSub}>\n         Subcribe\n        </button>\n     </form>\n   :\n   <div>\n      <h2>You just bought a book </h2>\n    \n   </div>\n     }\n     \n   </>)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}